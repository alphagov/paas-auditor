// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"time"

	"github.com/alphagov/paas-auditor/pkg/db"
	cfclient "github.com/cloudfoundry-community/go-cfclient"
)

type FakeEventDB struct {
	GetCFAuditEventsStub        func(db.RawEventFilter) ([]cfclient.Event, error)
	getCFAuditEventsMutex       sync.RWMutex
	getCFAuditEventsArgsForCall []struct {
		arg1 db.RawEventFilter
	}
	getCFAuditEventsReturns struct {
		result1 []cfclient.Event
		result2 error
	}
	getCFAuditEventsReturnsOnCall map[int]struct {
		result1 []cfclient.Event
		result2 error
	}
	GetCFEventCountStub        func() (int64, error)
	getCFEventCountMutex       sync.RWMutex
	getCFEventCountArgsForCall []struct {
	}
	getCFEventCountReturns struct {
		result1 int64
		result2 error
	}
	getCFEventCountReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	GetLatestCFEventTimeStub        func() (time.Time, error)
	getLatestCFEventTimeMutex       sync.RWMutex
	getLatestCFEventTimeArgsForCall []struct {
	}
	getLatestCFEventTimeReturns struct {
		result1 time.Time
		result2 error
	}
	getLatestCFEventTimeReturnsOnCall map[int]struct {
		result1 time.Time
		result2 error
	}
	GetUnshippedCFAuditEventsForShipperStub        func(string) ([]cfclient.Event, error)
	getUnshippedCFAuditEventsForShipperMutex       sync.RWMutex
	getUnshippedCFAuditEventsForShipperArgsForCall []struct {
		arg1 string
	}
	getUnshippedCFAuditEventsForShipperReturns struct {
		result1 []cfclient.Event
		result2 error
	}
	getUnshippedCFAuditEventsForShipperReturnsOnCall map[int]struct {
		result1 []cfclient.Event
		result2 error
	}
	InitStub        func() error
	initMutex       sync.RWMutex
	initArgsForCall []struct {
	}
	initReturns struct {
		result1 error
	}
	initReturnsOnCall map[int]struct {
		result1 error
	}
	StoreCFAuditEventsStub        func([]cfclient.Event) error
	storeCFAuditEventsMutex       sync.RWMutex
	storeCFAuditEventsArgsForCall []struct {
		arg1 []cfclient.Event
	}
	storeCFAuditEventsReturns struct {
		result1 error
	}
	storeCFAuditEventsReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateShipperCursorStub        func(string, string, string) error
	updateShipperCursorMutex       sync.RWMutex
	updateShipperCursorArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	updateShipperCursorReturns struct {
		result1 error
	}
	updateShipperCursorReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventDB) GetCFAuditEvents(arg1 db.RawEventFilter) ([]cfclient.Event, error) {
	fake.getCFAuditEventsMutex.Lock()
	ret, specificReturn := fake.getCFAuditEventsReturnsOnCall[len(fake.getCFAuditEventsArgsForCall)]
	fake.getCFAuditEventsArgsForCall = append(fake.getCFAuditEventsArgsForCall, struct {
		arg1 db.RawEventFilter
	}{arg1})
	stub := fake.GetCFAuditEventsStub
	fakeReturns := fake.getCFAuditEventsReturns
	fake.recordInvocation("GetCFAuditEvents", []interface{}{arg1})
	fake.getCFAuditEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEventDB) GetCFAuditEventsCallCount() int {
	fake.getCFAuditEventsMutex.RLock()
	defer fake.getCFAuditEventsMutex.RUnlock()
	return len(fake.getCFAuditEventsArgsForCall)
}

func (fake *FakeEventDB) GetCFAuditEventsCalls(stub func(db.RawEventFilter) ([]cfclient.Event, error)) {
	fake.getCFAuditEventsMutex.Lock()
	defer fake.getCFAuditEventsMutex.Unlock()
	fake.GetCFAuditEventsStub = stub
}

func (fake *FakeEventDB) GetCFAuditEventsArgsForCall(i int) db.RawEventFilter {
	fake.getCFAuditEventsMutex.RLock()
	defer fake.getCFAuditEventsMutex.RUnlock()
	argsForCall := fake.getCFAuditEventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEventDB) GetCFAuditEventsReturns(result1 []cfclient.Event, result2 error) {
	fake.getCFAuditEventsMutex.Lock()
	defer fake.getCFAuditEventsMutex.Unlock()
	fake.GetCFAuditEventsStub = nil
	fake.getCFAuditEventsReturns = struct {
		result1 []cfclient.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeEventDB) GetCFAuditEventsReturnsOnCall(i int, result1 []cfclient.Event, result2 error) {
	fake.getCFAuditEventsMutex.Lock()
	defer fake.getCFAuditEventsMutex.Unlock()
	fake.GetCFAuditEventsStub = nil
	if fake.getCFAuditEventsReturnsOnCall == nil {
		fake.getCFAuditEventsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Event
			result2 error
		})
	}
	fake.getCFAuditEventsReturnsOnCall[i] = struct {
		result1 []cfclient.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeEventDB) GetCFEventCount() (int64, error) {
	fake.getCFEventCountMutex.Lock()
	ret, specificReturn := fake.getCFEventCountReturnsOnCall[len(fake.getCFEventCountArgsForCall)]
	fake.getCFEventCountArgsForCall = append(fake.getCFEventCountArgsForCall, struct {
	}{})
	stub := fake.GetCFEventCountStub
	fakeReturns := fake.getCFEventCountReturns
	fake.recordInvocation("GetCFEventCount", []interface{}{})
	fake.getCFEventCountMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEventDB) GetCFEventCountCallCount() int {
	fake.getCFEventCountMutex.RLock()
	defer fake.getCFEventCountMutex.RUnlock()
	return len(fake.getCFEventCountArgsForCall)
}

func (fake *FakeEventDB) GetCFEventCountCalls(stub func() (int64, error)) {
	fake.getCFEventCountMutex.Lock()
	defer fake.getCFEventCountMutex.Unlock()
	fake.GetCFEventCountStub = stub
}

func (fake *FakeEventDB) GetCFEventCountReturns(result1 int64, result2 error) {
	fake.getCFEventCountMutex.Lock()
	defer fake.getCFEventCountMutex.Unlock()
	fake.GetCFEventCountStub = nil
	fake.getCFEventCountReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeEventDB) GetCFEventCountReturnsOnCall(i int, result1 int64, result2 error) {
	fake.getCFEventCountMutex.Lock()
	defer fake.getCFEventCountMutex.Unlock()
	fake.GetCFEventCountStub = nil
	if fake.getCFEventCountReturnsOnCall == nil {
		fake.getCFEventCountReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.getCFEventCountReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeEventDB) GetLatestCFEventTime() (time.Time, error) {
	fake.getLatestCFEventTimeMutex.Lock()
	ret, specificReturn := fake.getLatestCFEventTimeReturnsOnCall[len(fake.getLatestCFEventTimeArgsForCall)]
	fake.getLatestCFEventTimeArgsForCall = append(fake.getLatestCFEventTimeArgsForCall, struct {
	}{})
	stub := fake.GetLatestCFEventTimeStub
	fakeReturns := fake.getLatestCFEventTimeReturns
	fake.recordInvocation("GetLatestCFEventTime", []interface{}{})
	fake.getLatestCFEventTimeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEventDB) GetLatestCFEventTimeCallCount() int {
	fake.getLatestCFEventTimeMutex.RLock()
	defer fake.getLatestCFEventTimeMutex.RUnlock()
	return len(fake.getLatestCFEventTimeArgsForCall)
}

func (fake *FakeEventDB) GetLatestCFEventTimeCalls(stub func() (time.Time, error)) {
	fake.getLatestCFEventTimeMutex.Lock()
	defer fake.getLatestCFEventTimeMutex.Unlock()
	fake.GetLatestCFEventTimeStub = stub
}

func (fake *FakeEventDB) GetLatestCFEventTimeReturns(result1 time.Time, result2 error) {
	fake.getLatestCFEventTimeMutex.Lock()
	defer fake.getLatestCFEventTimeMutex.Unlock()
	fake.GetLatestCFEventTimeStub = nil
	fake.getLatestCFEventTimeReturns = struct {
		result1 time.Time
		result2 error
	}{result1, result2}
}

func (fake *FakeEventDB) GetLatestCFEventTimeReturnsOnCall(i int, result1 time.Time, result2 error) {
	fake.getLatestCFEventTimeMutex.Lock()
	defer fake.getLatestCFEventTimeMutex.Unlock()
	fake.GetLatestCFEventTimeStub = nil
	if fake.getLatestCFEventTimeReturnsOnCall == nil {
		fake.getLatestCFEventTimeReturnsOnCall = make(map[int]struct {
			result1 time.Time
			result2 error
		})
	}
	fake.getLatestCFEventTimeReturnsOnCall[i] = struct {
		result1 time.Time
		result2 error
	}{result1, result2}
}

func (fake *FakeEventDB) GetUnshippedCFAuditEventsForShipper(arg1 string) ([]cfclient.Event, error) {
	fake.getUnshippedCFAuditEventsForShipperMutex.Lock()
	ret, specificReturn := fake.getUnshippedCFAuditEventsForShipperReturnsOnCall[len(fake.getUnshippedCFAuditEventsForShipperArgsForCall)]
	fake.getUnshippedCFAuditEventsForShipperArgsForCall = append(fake.getUnshippedCFAuditEventsForShipperArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUnshippedCFAuditEventsForShipperStub
	fakeReturns := fake.getUnshippedCFAuditEventsForShipperReturns
	fake.recordInvocation("GetUnshippedCFAuditEventsForShipper", []interface{}{arg1})
	fake.getUnshippedCFAuditEventsForShipperMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEventDB) GetUnshippedCFAuditEventsForShipperCallCount() int {
	fake.getUnshippedCFAuditEventsForShipperMutex.RLock()
	defer fake.getUnshippedCFAuditEventsForShipperMutex.RUnlock()
	return len(fake.getUnshippedCFAuditEventsForShipperArgsForCall)
}

func (fake *FakeEventDB) GetUnshippedCFAuditEventsForShipperCalls(stub func(string) ([]cfclient.Event, error)) {
	fake.getUnshippedCFAuditEventsForShipperMutex.Lock()
	defer fake.getUnshippedCFAuditEventsForShipperMutex.Unlock()
	fake.GetUnshippedCFAuditEventsForShipperStub = stub
}

func (fake *FakeEventDB) GetUnshippedCFAuditEventsForShipperArgsForCall(i int) string {
	fake.getUnshippedCFAuditEventsForShipperMutex.RLock()
	defer fake.getUnshippedCFAuditEventsForShipperMutex.RUnlock()
	argsForCall := fake.getUnshippedCFAuditEventsForShipperArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEventDB) GetUnshippedCFAuditEventsForShipperReturns(result1 []cfclient.Event, result2 error) {
	fake.getUnshippedCFAuditEventsForShipperMutex.Lock()
	defer fake.getUnshippedCFAuditEventsForShipperMutex.Unlock()
	fake.GetUnshippedCFAuditEventsForShipperStub = nil
	fake.getUnshippedCFAuditEventsForShipperReturns = struct {
		result1 []cfclient.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeEventDB) GetUnshippedCFAuditEventsForShipperReturnsOnCall(i int, result1 []cfclient.Event, result2 error) {
	fake.getUnshippedCFAuditEventsForShipperMutex.Lock()
	defer fake.getUnshippedCFAuditEventsForShipperMutex.Unlock()
	fake.GetUnshippedCFAuditEventsForShipperStub = nil
	if fake.getUnshippedCFAuditEventsForShipperReturnsOnCall == nil {
		fake.getUnshippedCFAuditEventsForShipperReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Event
			result2 error
		})
	}
	fake.getUnshippedCFAuditEventsForShipperReturnsOnCall[i] = struct {
		result1 []cfclient.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeEventDB) Init() error {
	fake.initMutex.Lock()
	ret, specificReturn := fake.initReturnsOnCall[len(fake.initArgsForCall)]
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
	}{})
	stub := fake.InitStub
	fakeReturns := fake.initReturns
	fake.recordInvocation("Init", []interface{}{})
	fake.initMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEventDB) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *FakeEventDB) InitCalls(stub func() error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = stub
}

func (fake *FakeEventDB) InitReturns(result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventDB) InitReturnsOnCall(i int, result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	if fake.initReturnsOnCall == nil {
		fake.initReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventDB) StoreCFAuditEvents(arg1 []cfclient.Event) error {
	var arg1Copy []cfclient.Event
	if arg1 != nil {
		arg1Copy = make([]cfclient.Event, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.storeCFAuditEventsMutex.Lock()
	ret, specificReturn := fake.storeCFAuditEventsReturnsOnCall[len(fake.storeCFAuditEventsArgsForCall)]
	fake.storeCFAuditEventsArgsForCall = append(fake.storeCFAuditEventsArgsForCall, struct {
		arg1 []cfclient.Event
	}{arg1Copy})
	stub := fake.StoreCFAuditEventsStub
	fakeReturns := fake.storeCFAuditEventsReturns
	fake.recordInvocation("StoreCFAuditEvents", []interface{}{arg1Copy})
	fake.storeCFAuditEventsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEventDB) StoreCFAuditEventsCallCount() int {
	fake.storeCFAuditEventsMutex.RLock()
	defer fake.storeCFAuditEventsMutex.RUnlock()
	return len(fake.storeCFAuditEventsArgsForCall)
}

func (fake *FakeEventDB) StoreCFAuditEventsCalls(stub func([]cfclient.Event) error) {
	fake.storeCFAuditEventsMutex.Lock()
	defer fake.storeCFAuditEventsMutex.Unlock()
	fake.StoreCFAuditEventsStub = stub
}

func (fake *FakeEventDB) StoreCFAuditEventsArgsForCall(i int) []cfclient.Event {
	fake.storeCFAuditEventsMutex.RLock()
	defer fake.storeCFAuditEventsMutex.RUnlock()
	argsForCall := fake.storeCFAuditEventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEventDB) StoreCFAuditEventsReturns(result1 error) {
	fake.storeCFAuditEventsMutex.Lock()
	defer fake.storeCFAuditEventsMutex.Unlock()
	fake.StoreCFAuditEventsStub = nil
	fake.storeCFAuditEventsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventDB) StoreCFAuditEventsReturnsOnCall(i int, result1 error) {
	fake.storeCFAuditEventsMutex.Lock()
	defer fake.storeCFAuditEventsMutex.Unlock()
	fake.StoreCFAuditEventsStub = nil
	if fake.storeCFAuditEventsReturnsOnCall == nil {
		fake.storeCFAuditEventsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeCFAuditEventsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventDB) UpdateShipperCursor(arg1 string, arg2 string, arg3 string) error {
	fake.updateShipperCursorMutex.Lock()
	ret, specificReturn := fake.updateShipperCursorReturnsOnCall[len(fake.updateShipperCursorArgsForCall)]
	fake.updateShipperCursorArgsForCall = append(fake.updateShipperCursorArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UpdateShipperCursorStub
	fakeReturns := fake.updateShipperCursorReturns
	fake.recordInvocation("UpdateShipperCursor", []interface{}{arg1, arg2, arg3})
	fake.updateShipperCursorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEventDB) UpdateShipperCursorCallCount() int {
	fake.updateShipperCursorMutex.RLock()
	defer fake.updateShipperCursorMutex.RUnlock()
	return len(fake.updateShipperCursorArgsForCall)
}

func (fake *FakeEventDB) UpdateShipperCursorCalls(stub func(string, string, string) error) {
	fake.updateShipperCursorMutex.Lock()
	defer fake.updateShipperCursorMutex.Unlock()
	fake.UpdateShipperCursorStub = stub
}

func (fake *FakeEventDB) UpdateShipperCursorArgsForCall(i int) (string, string, string) {
	fake.updateShipperCursorMutex.RLock()
	defer fake.updateShipperCursorMutex.RUnlock()
	argsForCall := fake.updateShipperCursorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEventDB) UpdateShipperCursorReturns(result1 error) {
	fake.updateShipperCursorMutex.Lock()
	defer fake.updateShipperCursorMutex.Unlock()
	fake.UpdateShipperCursorStub = nil
	fake.updateShipperCursorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventDB) UpdateShipperCursorReturnsOnCall(i int, result1 error) {
	fake.updateShipperCursorMutex.Lock()
	defer fake.updateShipperCursorMutex.Unlock()
	fake.UpdateShipperCursorStub = nil
	if fake.updateShipperCursorReturnsOnCall == nil {
		fake.updateShipperCursorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateShipperCursorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCFAuditEventsMutex.RLock()
	defer fake.getCFAuditEventsMutex.RUnlock()
	fake.getCFEventCountMutex.RLock()
	defer fake.getCFEventCountMutex.RUnlock()
	fake.getLatestCFEventTimeMutex.RLock()
	defer fake.getLatestCFEventTimeMutex.RUnlock()
	fake.getUnshippedCFAuditEventsForShipperMutex.RLock()
	defer fake.getUnshippedCFAuditEventsForShipperMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	fake.storeCFAuditEventsMutex.RLock()
	defer fake.storeCFAuditEventsMutex.RUnlock()
	fake.updateShipperCursorMutex.RLock()
	defer fake.updateShipperCursorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.EventDB = new(FakeEventDB)
